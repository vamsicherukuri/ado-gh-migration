# Copyright (c) 2025 Vamsi Cherukuri, Microsoft
# 
# MIT License
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# ADO2GH Post-Migration Validation Script
#
# Description:
#   This script validates migrated repositories by retrieving data from both ADO source and GitHub target.
#   It uses the state file generated by 2_migrate_repo.ps1 to identify repositories to validate.
#   Provides informational comparison of commit and branch counts between systems.
#
#   Validation includes:
#   - ADO Source: Repository accessibility, commit count, branch count
#   - GitHub Target: Repository accessibility, commit count, branch count
#   - Comparison: Side-by-side display of counts (informational only, no pass/fail logic)
#
# Prerequisites:
#   - GH_PAT & ADO_PAT environment variable set
#   - State file from 2_migrate_repo.ps1 (migration-state-comprehensive-*.json)
#
# Usage:
#   .\3_migration_validation.ps1
#   .\3_migration_validation.ps1 -StateFile "migration-state-comprehensive-YYYYMMDD-HHMMSS.json"
#
# Order of operations:
#   [1/3] Load migration state file from 2_migrate_repo.ps1
#         - Auto-discovers latest state file if not specified
#         - Creates timestamped log file for transcript
#   [2/3] Validate each repository (ADO source and GitHub target)
#         - Queries ADO REST API for commit and branch counts
#         - Queries GitHub API via gh cli for commit and branch counts
#         - Displays side-by-side comparison (informational only)
#   [3/3] Update state file with validation results
#         - Adds ValidationResults, ValidationTimestamp, ValidationSummary
#         - Modifies original state file in-place (same filename)
#
# Output Files:
#   - Updated state file (original file modified in-place with validation data)
#   - validation-log-YYYYMMDD-HHmmss.txt (timestamped transcript log)

param(
    [string]$StateFile = ""  # Optional: specific state file to use
)

# Import helper module
$scriptPath = Split-Path -Parent $MyInvocation.MyCommand.Path
Import-Module "$scriptPath\MigrationHelpers.psm1" -Force -ErrorAction Stop

# Global tracking
$Global:ValidationStartTime = Get-Date
$Global:ValidationResults = @()

# Helper function: Get ADO authentication headers and encoded parameters
function Get-AdoAuthHeaders {
    param(
        [string]$TeamProject,
        [string]$AdoRepo
    )
    
    $encodedProject = [Uri]::EscapeDataString($TeamProject)
    $encodedRepo = [Uri]::EscapeDataString($AdoRepo)
    $base64Pat = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(":$($env:ADO_PAT)"))
    
    return @{
        Headers = @{ Authorization = "Basic $base64Pat" }
        EncodedProject = $encodedProject
        EncodedRepo = $encodedRepo
    }
}

# Helper function: Get ADO commit count via REST API
function Get-AdoCommitCount {
    param(
        [string]$AdoOrg,
        [string]$TeamProject,
        [string]$AdoRepo
    )
    
    if (!$env:ADO_PAT) {
        Write-Host "‚ö†Ô∏è ADO_PAT not set - skipping ADO validation" -ForegroundColor Yellow
        return -1
    }
    
    try {
        $auth = Get-AdoAuthHeaders -TeamProject $TeamProject -AdoRepo $AdoRepo
        
        # Use repository name directly in API endpoint
        $apiUrl = "https://dev.azure.com/$AdoOrg/$($auth.EncodedProject)/_apis/git/repositories/$($auth.EncodedRepo)/commits?api-version=7.0"
        
        # Get first page
        $response = Invoke-RestMethod -Uri $apiUrl -Headers $auth.Headers -Method Get
        $totalCommits = $response.value.Count
        
        # Handle pagination if there are more commits
        $skipToken = 0
        while ($response.value.Count -eq 100) {  # Default page size is 100
            $skipToken += 100
            $pagedUrl = "$apiUrl&`$skip=$skipToken"
            $response = Invoke-RestMethod -Uri $pagedUrl -Headers $auth.Headers -Method Get
            $totalCommits += $response.value.Count
        }
        
        return $totalCommits
        
    } catch {
        Write-Host "‚ö†Ô∏è Failed to get ADO commit count: $($_.Exception.Message)" -ForegroundColor Yellow
        return -1
    }
}

# Helper function: Get ADO branch count via REST API
function Get-AdoBranchCount {
    param(
        [string]$AdoOrg,
        [string]$TeamProject,
        [string]$AdoRepo
    )
    
    if (!$env:ADO_PAT) {
        return -1
    }
    
    try {
        $auth = Get-AdoAuthHeaders -TeamProject $TeamProject -AdoRepo $AdoRepo
        
        # Use repository name directly in API endpoint
        $apiUrl = "https://dev.azure.com/$AdoOrg/$($auth.EncodedProject)/_apis/git/repositories/$($auth.EncodedRepo)/refs?filter=heads/&api-version=7.0"
        $response = Invoke-RestMethod -Uri $apiUrl -Headers $auth.Headers -Method Get
        return $response.value.Count
        
    } catch {
        Write-Host "‚ö†Ô∏è Failed to get ADO branch count: $($_.Exception.Message)" -ForegroundColor Yellow
        return -1
    }
}

# Helper function: Get GitHub commit count
function Get-GitHubCommitCount {
    param(
        [string]$GitHubOrg,
        [string]$GitHubRepo
    )
    
    try {
        # Get total commit count from first page headers
        $response = gh api "/repos/$GitHubOrg/$GitHubRepo/commits?per_page=1" --include 2>&1
        
        # Parse Link header for last page number (indicates total commits)
        $linkHeader = $response | Select-String -Pattern 'link: .*page=(\d+)>; rel="last"'
        
        if ($linkHeader) {
            $totalCommits = [int]$linkHeader.Matches.Groups[1].Value
            return $totalCommits
        } else {
            # If no pagination, count is 1 or 0
            $commits = gh api "/repos/$GitHubOrg/$GitHubRepo/commits?per_page=100" | ConvertFrom-Json
            return $commits.Count
        }
        
    } catch {
        Write-Host "‚ö†Ô∏è Failed to get GitHub commit count: $($_.Exception.Message)" -ForegroundColor Yellow
        return -1
    }
}

# Helper function: Get GitHub branch count
function Get-GitHubBranchCount {
    param(
        [string]$GitHubOrg,
        [string]$GitHubRepo
    )
    
    try {
        $branches = gh api "/repos/$GitHubOrg/$GitHubRepo/branches?per_page=100" | ConvertFrom-Json
        return $branches.Count
        
    } catch {
        Write-Host "‚ö†Ô∏è Failed to get GitHub branch count: $($_.Exception.Message)" -ForegroundColor Yellow
        return -1
    }
}

# Main validation function
function Test-RepositoryMigration {
    param(
        [hashtable]$MigratedRepo
    )
    
    $adoOrg = $MigratedRepo.AdoOrganization
    $teamProject = $MigratedRepo.AdoTeamProject
    $adoRepo = $MigratedRepo.AdoRepository
    $githubOrg = $MigratedRepo.GitHubOrganization
    $githubRepo = $MigratedRepo.GitHubRepository
    
    Write-Host "`nüîç Validating: $adoOrg/$teamProject/$adoRepo -> $githubOrg/$githubRepo" -ForegroundColor Cyan
    
    $validationResult = @{
        AdoOrganization = $adoOrg
        AdoTeamProject = $teamProject
        AdoRepository = $adoRepo
        GitHubOrganization = $githubOrg
        GitHubRepository = $githubRepo
        ValidationStatus = "InProgress"
        ValidationTimestamp = (Get-Date).ToString("yyyy-MM-dd HH:mm:ss")
        AdoSourceValidation = @{}
        GitHubTargetValidation = @{}
        ComparisonResults = @{}
        Issues = @()
    }
    
    # Validate ADO Source
    Write-Host "   üìä Validating ADO source..." -ForegroundColor Gray
    $adoCommitCount = Get-AdoCommitCount -AdoOrg $adoOrg -TeamProject $teamProject -AdoRepo $adoRepo
    $adoBranchCount = Get-AdoBranchCount -AdoOrg $adoOrg -TeamProject $teamProject -AdoRepo $adoRepo
    
    $validationResult.AdoSourceValidation = @{
        CommitCount = $adoCommitCount
        BranchCount = $adoBranchCount
        Accessible = ($adoCommitCount -ge 0)
    }
    
    if ($adoCommitCount -ge 0) {
        Write-Host "      ‚úÖ ADO: $adoCommitCount commits, $adoBranchCount branches" -ForegroundColor Green
    } else {
        Write-Host "      ‚ö†Ô∏è ADO validation skipped (PAT not available)" -ForegroundColor Yellow
    }
    
    # Validate GitHub Target
    Write-Host "   üìä Validating GitHub target..." -ForegroundColor Gray
    $githubCommitCount = Get-GitHubCommitCount -GitHubOrg $githubOrg -GitHubRepo $githubRepo
    $githubBranchCount = Get-GitHubBranchCount -GitHubOrg $githubOrg -GitHubRepo $githubRepo
    
    $validationResult.GitHubTargetValidation = @{
        CommitCount = $githubCommitCount
        BranchCount = $githubBranchCount
        Accessible = ($githubCommitCount -ge 0)
    }
    
    if ($githubCommitCount -ge 0) {
        Write-Host "      ‚úÖ GitHub: $githubCommitCount commits, $githubBranchCount branches" -ForegroundColor Green
    } else {
        Write-Host "      ‚ùå GitHub validation failed" -ForegroundColor Red
        $validationResult.Issues += "GitHub repository not accessible"
    }
    
    # Compare results (informational only - show counts as-is)
    if ($adoCommitCount -ge 0 -and $githubCommitCount -ge 0) {
        Write-Host "   üìä Comparison Results:" -ForegroundColor Cyan
        
        $validationResult.ComparisonResults = @{
            AdoCommitCount = $adoCommitCount
            GitHubCommitCount = $githubCommitCount
            AdoBranchCount = $adoBranchCount
            GitHubBranchCount = $githubBranchCount
        }
        
        # Display side-by-side comparison (informational only)
        Write-Host "      üìã Commits: ADO=$adoCommitCount | GitHub=$githubCommitCount" -ForegroundColor Gray
        Write-Host "      üìã Branches: ADO=$adoBranchCount | GitHub=$githubBranchCount" -ForegroundColor Gray
        
        # Always mark as Success if both sources are accessible
        $validationResult.ValidationStatus = "Success"
        Write-Host "   ‚úÖ Validation COMPLETED" -ForegroundColor Green
    } else {
        $validationResult.ValidationStatus = "Incomplete"
        $validationResult.Issues += "Cannot compare - source or target validation failed"
        Write-Host "   ‚ö†Ô∏è Validation INCOMPLETE" -ForegroundColor Yellow
    }
    
    return $validationResult
}

# Main execution
$LogFile = "validation-log-$(Get-Date -Format 'yyyyMMdd-HHmmss').txt"
Start-Transcript -Path $LogFile

Write-Host "`n========================================" -ForegroundColor Cyan
Write-Host "  ADO2GH Migration Validation Script" -ForegroundColor Cyan
Write-Host "========================================`n" -ForegroundColor Cyan

# 1. Find and load state file
Write-Host "[1/3] Loading migration state file..." -ForegroundColor Yellow

$StateFile = Get-LatestStateFile -StateFile $StateFile -Pattern "migration-state-comprehensive-*.json"
if (!$StateFile) { exit 1 }

if (-not (Test-Path $StateFile)) {
    Write-Host "‚ùå ERROR: State file not found: $StateFile" -ForegroundColor Red
    exit 1
}

try {
    $stateData = Get-Content -Path $StateFile -Raw | ConvertFrom-Json
    Write-Host "‚úÖ State file loaded: $StateFile" -ForegroundColor Green
    Write-Host "   Total repositories to validate: $($stateData.MigratedRepositories.Count)" -ForegroundColor Gray
} catch {
    Write-Host "‚ùå ERROR: Failed to load state file: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}

# 2. Validate each repository
Write-Host "`n[2/3] Validating migrated repositories..." -ForegroundColor Yellow

foreach ($repo in $stateData.MigratedRepositories) {
    $validationResult = Test-RepositoryMigration -MigratedRepo @{
        AdoOrganization = $repo.AdoOrganization
        AdoTeamProject = $repo.AdoTeamProject
        AdoRepository = $repo.AdoRepository
        GitHubOrganization = $repo.GitHubOrganization
        GitHubRepository = $repo.GitHubRepository
    }
    
    $Global:ValidationResults += $validationResult
}

# 3. Update state file with validation results
Write-Host "`n[3/3] Updating state file with validation results..." -ForegroundColor Yellow

$stateData | Add-Member -NotePropertyName "ValidationResults" -NotePropertyValue $Global:ValidationResults -Force
$stateData | Add-Member -NotePropertyName "ValidationTimestamp" -NotePropertyValue (Get-Date).ToString("yyyy-MM-dd HH:mm:ss") -Force
$stateData | Add-Member -NotePropertyName "ValidationDuration" -NotePropertyValue ((Get-Date) - $Global:ValidationStartTime).ToString() -Force

# Calculate validation summary
$successCount = ($Global:ValidationResults | Where-Object { $_.ValidationStatus -eq "Success" }).Count
$incompleteCount = ($Global:ValidationResults | Where-Object { $_.ValidationStatus -eq "Incomplete" }).Count

$validationSummary = @{
    TotalValidated = $Global:ValidationResults.Count
    Successful = $successCount
    Incomplete = $incompleteCount
    AllIssues = @($Global:ValidationResults | Where-Object { $_.Issues.Count -gt 0 } | ForEach-Object {
        @{
            Repository = "$($_.AdoOrganization)/$($_.AdoTeamProject)/$($_.AdoRepository)"
            Issues = $_.Issues
        }
    })
}

$stateData | Add-Member -NotePropertyName "ValidationSummary" -NotePropertyValue $validationSummary -Force

# Save updated state file
$stateData | ConvertTo-Json -Depth 10 | Out-File -FilePath $StateFile -Encoding UTF8
Write-Host "‚úÖ State file updated with validation results" -ForegroundColor Green

# Final Summary
Write-Host "`n========================================" -ForegroundColor Cyan
Write-Host "  Validation Summary" -ForegroundColor Cyan
Write-Host "========================================" -ForegroundColor Cyan

Write-Host "üìä Total Repositories: $($Global:ValidationResults.Count)" -ForegroundColor White
Write-Host "‚úÖ Successful Validations: $successCount" -ForegroundColor Green
Write-Host "‚ùå Incomplete: $incompleteCount" -ForegroundColor Red
Write-Host "‚è±Ô∏è  Total Duration: $((Get-Date) - $Global:ValidationStartTime)" -ForegroundColor Gray

if ($validationSummary.AllIssues.Count -gt 0) {
    Write-Host "`n‚ö†Ô∏è Repositories with Issues:" -ForegroundColor Yellow
    foreach ($item in $validationSummary.AllIssues) {
        Write-Host "   - $($item.Repository):" -ForegroundColor Yellow
        foreach ($issue in $item.Issues) {
            Write-Host "      ‚Ä¢ $issue" -ForegroundColor Gray
        }
    }
}

if ($successCount -eq $Global:ValidationResults.Count) {
    Write-Host "`nüéâ All repositories validated successfully!" -ForegroundColor Green
    Write-Host "`nüéØ Next Steps:" -ForegroundColor Yellow
    Write-Host "   1. Run 4_generate_mannequins.ps1 to identify user mappings" -ForegroundColor Gray
    Write-Host "   2. Run 5_reclaim_mannequins.ps1 to reclaim mannequin accounts" -ForegroundColor Gray
    Write-Host "   3. Run 6_rewire_pipelines.ps1 to update pipeline configurations" -ForegroundColor Gray
    Write-Host "   4. Run 7_integrate_boards.ps1 for Azure Boards integration" -ForegroundColor Gray
    Write-Host "   5. Run 8_disable_ado_repos.ps1 to disable ADO repositories" -ForegroundColor Gray
} else {
    Write-Host "`n‚ö†Ô∏è Some repositories require attention before proceeding" -ForegroundColor Yellow
    Write-Host "   Review issues above and re-run validation if needed" -ForegroundColor Gray
}

Write-Host "`nüèÅ Validation completed!" -ForegroundColor Green

Stop-Transcript

